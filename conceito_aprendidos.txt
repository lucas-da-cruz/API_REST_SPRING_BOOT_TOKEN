Conceitos aprendidos durante a constru��o do projeto:
Parte 01

- Um resumo da hist�ria e evolu��o do Spring;
- Que, para criar um projeto com Spring Boot, utilizamos o Spring Initialzr, atrav�s do site https://start.spring.io;
- Como importar um projeto com Spring Boot na IDE Eclipse;
- Como � o pom.xml de uma aplica��o que utiliza o Spring Boot;
- Que, para inicializar o projeto com Spring Boot, devemos utilizar a classe com o m�todo main;
- Que, para criar um controller, utilizamos as anota��es @Controller e @RequestMapping.

Parte 02

- Sobre a API que desenvolveremos ao longo do curso e sobre as classes de dom�nio dela;
- Que, para um m�todo no controller n�o encaminhar a requisi��o a uma p�gina JSP, ou Thymeleaf, devemos utilizar a anota��o @ResponseBody;
- Que o Spring, por padr�o, converte os dados no formato JSON, utilizando a biblioteca Jackson;
- Que, para n�o repetir a anota��o @ResponseBody em todos os m�todos do controller, devemos utilizar a anota��o @RestController;
- Que, para n�o precisar reiniciar manualmente o servidor a cada altera��o feita no c�digo, basta utilizar o m�dulo Spring Boot DevTools;
- Que n�o � uma boa pr�tica retornar entidades JPA nos m�todos dos controllers, sendo mais indicado retornar classes que seguem o padr�o DTO (Data Transfer Object);
- Os principais conceitos sobre o modelo arquitetural REST, como recursos, URIs, verbos HTTP, Representa��es e comunica��o stateless.

Parte 03

- Para utilizar o JPA no projeto, devemos incluir o m�dulo Spring Boot Data JPA, que utiliza o Hibernate, por padr�o, como sua implementa��o;
- Para configurar o banco de dados da aplica��o, devemos adicionar as propriedades do datasource e do JPA no arquivo src/main/resources/application.properties;
- Para acessar a p�gina de gerenciamento do banco de dados H2, devemos configurar o console do H2 com propriedades no arquivo src/main/resources/application.properties;
- Para mapear as classes de dom�nio da aplica��o como entidade JPA, devemos utilizar as anota��es @Entity, @Id, @GeneratedValue, @ManyToOne, @OneToMany e @Enumerated;
- Para que o Spring Boot popule automaticamente o banco de dados da aplica��o, devemos criar o arquivo src/main/resources/data.sql;
- Para criar um Repository, devemos criar uma interface, que herda da interface JPARepository do Spring Data JPA;
- Para criar consultas que filtram por atributos da entidade, devemos seguir o padr�o de nomenclatura de m�todos do Spring, como por exemplo findByCursoNome;
- Para criar manualmente a consulta com JPQL, devemos utilizar a anota��o @Query;

Parte 04

- Que para evitar repetir a URL em todos os m�todos, devemos utilizar a anota��o @RequestMapping em cima da classe controller;
- Que para mapear requisi��es do tipo POST, devemos utilizar a anota��o @PostMapping;
- Que para receber dados enviados no corpo da requisi��o, a boa pr�tica � criar uma classe que tamb�m siga o padr�o DTO (Data Transfer Object);
- Que a boa pr�tica para m�todos que cadastram informa��es � devolver o c�digo HTTP 201, ao inv�s do c�digo 200;
- Que para montar uma resposta a ser devolvida ao cliente da API, devemos utilizar a classe ResponseEntity do Spring;
- Que para testar requisi��es do tipo POST, precisamos utilizar alguma ferramenta de testes de API Rest;
- Como utilizar o Postman para testar uma API Rest;

Parte 05

- Para fazer valida��es das informa��es enviadas pelos clientes da API, podemos utilizar a especifica��o Bean Validation, com as anota��es @NotNull, @NotEmpty, @Size, dentre outras;
- Para o Spring disparar as valida��es do Bean Validation e devolver um erro 400, caso alguma informa��o enviada pelo cliente esteja inv�lida, devemos utilizar a anota��o @Valid;
- Para interceptar as exceptions que forem lan�adas nos m�todos das classes controller, devemos criar uma classe anotada com @RestControllerAdvice;
- Para tratar os erros de valida��o do Bean Validation e personalizar o JSON, que ser� devolvido ao cliente da API, com as mensagens de erro, devemos criar um m�todo na classe @RestControllerAdvice e anot�-lo com @ExceptionHandler e @ResponseStatus.

Parte 06

- Para receber par�metros din�micos no path da URL, devemos utilizar a anota��o @PathVariable;
- Para mapear requisi��es do tipo PUT, devemos utilizar a anota��o @PutMapping;
- Para fazer o controle transacional autom�tico, devemos utilizar a anota��o @Transactional nos m�todos do controller;
- Para mapear requisi��es do tipo DELETE, devemos utilizar a anota��o @DeleteMapping;
- Para tratar o erro 404 na classe controller, devemos utilizar o m�todo findById, ao inv�s do m�todo getOne, e utilizar a classe ResponseEntity para montar a resposta de not found;
- O m�todo getOne lan�a uma exception quando o id passado como par�metro n�o existir no banco de dados;
- O m�todo findById retorna um objeto Optional<>, que pode ou n�o conter um objeto.

Parte 07

- Para realizar paginação com Spring Data JPA, devemos utilizar a interface Pageable;
- Nas classes Repository, os métodos que recebem um pageable como parâmetro retornam objetos do tipo Page<>, ao invés de List<>;
- Para o Spring incluir informações sobre a paginação no JSON de resposta enviado ao cliente da API, devemos alterar o retorno do método do controller de List<> para Page<>;
- Para fazer a ordenação na consulta ao banco de dados, devemos utilizar também a interface Pageable, passando como parâmetro a direção da ordenação, utilizando a classe Direction, e o nome do atributo para ordenar;
- Para receber os parâmetros de ordenação e paginação diretamente nos métodos do controller, devemos habilitar o módulo SpringDataWebSupport, adicionando a anotação @EnableSpringDataWebSupport na classe ForumApplication.

Parte 08

Para utilizar o módulo de cache do Spring Boot, devemos adicioná-lo como dependência do projeto no arquivo pom.xml;
Para habilitar o uso de caches na aplicação, devemos adicionar a anotação @EnableCaching na classe ForumApplication;
Para que o Spring guarde o retorno de um método no cache, devemos anotá-lo com @Cacheable;
Para o Spring invalidar algum cache após um determinado método ser chamado, devemos anotá-lo com @CacheEvict;
Devemos utilizar cache apenas para as informações que nunca ou raramente são atualizadas no banco de dados.

Parte 09

- Para utilizar o módulo do Spring Security, devemos adicioná-lo como dependência do projeto no arquivo pom.xml;
- Para habilitar e configurar o controle de autenticação e autorização do projeto, devemos criar uma classe e anotá-la com @Configuration e @EnableWebSecurity;
- Para liberar acesso a algum endpoint da nossa API, devemos chamar o método http.authorizeRequests().antMatchers().permitAll() dentro do método configure(HttpSecurity http), que está na classe SecurityConfigurations;
- O método anyRequest().authenticated() indica ao Spring Security para bloquear todos os endpoints que não foram liberados anteriormente com o método permitAll();
- Para implementar o controle de autenticação na API, devemos implementar a interface UserDetails na classe Usuario e também implementar a interface GrantedAuthority na classe Perfil;
- Para o Spring Security gerar automaticamente um formulário de login, devemos chamar o método and().formLogin(), dentro do método configure(HttpSecurity http), que está na classe SecurityConfigurations;
- A lógica de autenticação, que consulta o usuário no banco de dados, deve implementar a interface UserDetailsService;
- Devemos indicar ao Spring Security qual o algoritmo de hashing de senha que utilizaremos na API, chamando o método passwordEncoder(), dentro do método configure(AuthenticationManagerBuilder auth), que está na classe SecurityConfigurations.

Parte 10

- Em uma API Rest, não é uma boa prática utilizar autenticação com o uso de session;
- Uma das maneiras de fazer autenticação stateless é utilizando tokens JWT (Json Web Token);
- Para utilizar JWT na API, devemos adicionar a dependência da biblioteca jjwt no arquivo pom.xml do projeto;
- Para configurar a autenticação stateless no Spring Security, devemos utilizar o método sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
- Para disparar manualmente o processo de autenticação no Spring Security, devemos utilizar a classe AuthenticationManager;
- Para poder injetar o AuthenticationManager no controller, devemos criar um método anotado com @Bean, na classe SecurityConfigurations, que retorna uma chamada ao método super.authenticationManager();
- Para criar o token JWT, devemos utilizar a classe Jwts;
- O token tem um período de expiração, que pode ser definida no arquivo application.properties;
- Para injetar uma propriedade do arquivo application.properties, devemos utilizar a anotação @Value.

Parte 11

- Para enviar o token JWT na requisição, é necessário adicionar o cabeçalho Authorization, passando como valor Bearer token;
- Para criar um filtro no Spring, devemos criar uma classe que herda da classe OncePerRequestFilter;
- Para recuperar o token JWT da requisição no filter, devemos chamar o método request.getHeader("Authorization");
- Para habilitar o filtro no Spring Security, devemos chamar o método and().addFilterBefore(new AutenticacaoViaTokenFilter(), UsernamePasswordAuthenticationFilter.class);
- Para indicar ao Spring Security que o cliente está autenticado, devemos utilizar a classe SecurityContextHolder, chamando o método SecurityContextHolder.getContext().setAuthentication(authentication).

